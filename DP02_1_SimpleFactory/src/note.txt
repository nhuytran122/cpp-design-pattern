Note th√™m
S·∫Øp x·∫øp c√°c ƒë·ªëi t∆∞·ª£ng theo thu·ªôc t√≠nh c√≥ ki·ªÉu String
        PhanTu tmp = null;

        for (int i = 0; i < lst.size() - 1; i++) {

            for (int j = i + 1; j < lst.size(); j++) {

                String x = lst.get(i).getXepLoai();

                String y = lst.get(j).getXepLoai();

                if (x.compareTo(y) > 0) {

                    tmp = lst.get(i);

                    lst.set(i, lst.get(j));

                    lst.set(j, tmp);

                }

            }

        }


s1 == s2 th√¨ tr·∫£ v·ªÅ 0.
s1 > s2 th√¨ tr·∫£ v·ªÅ gi√° tr·ªã d∆∞∆°ng: ch·∫°y for c√°i tr∆∞·ªõc so vs c√°i sau > 0 th√¨ s·∫Øp x·∫øp t·ª´ A ‚Üí Z
s1 < s2 th√¨ tr·∫£ v·ªÅ gi√° tr·ªã √¢m
C√°c ƒëo·∫°n code SQL & JAVA
a. Select

public List<SinhVien> selectAll() {

		List<SinhVien> lstSV = new ArrayList<>();

	    try {

	    	Connection con = DbHelper.getInstance().getConnection();

	    	String sql = "SELECT * FROM SinhVien";

	        PreparedStatement stm = con.prepareStatement(sql);

	        ResultSet rs = stm.executeQuery();

	        while (rs.next()) {

	        	String masv = rs.getString("MaSinhVien");

				String hoten = rs.getString("HoTen");

				Date ngaysinh = rs.getDate("NgaySinh");

				Boolean gioitinhnam = rs.getBoolean("GioiTinhNam");

				lstSV.add(new SinhVien(masv, hoten, gioitinhnam, ngaysinh));

	        }

	        rs.close();

	    } catch (SQLException e) {

	        e.printStackTrace();

	    }

	    return lstSV;

	}


b. Select_where

Connection cn = (DPHelper.get_instance()).getConnection();
try {
			System.out.println("Nhap ho ten muon tim: ");
			Scanner nhap = new Scanner(System.in);
			String ht = nhap.nextLine();
			//B1: Ket noi vao CSDL
			KetNoi kn = new KetNoi();
			kn.ketnoi();
			//B2: Tao cau lenh SQL
			String sql = "select * from tbl_nhanvien where hoten like ?";
			//B3: Tao cau lenh
			PreparedStatement cmd = cn.prepareStatement(sql);
			//B4: Thuc hien cau lenh
                        //s·ªë 1 ·ªü ƒë√¢y ~ th·ª© t·ª± tham s·ªë trong l·ªánh sql c·ªßa d·∫•u ?
			cmd.setString(1, "%" + ht + "%");
			ResultSet rs = cmd.executeQuery();
			//B5: Duyet qua rs
			while(rs.next()) {
				String manv = rs.getString("manv");
				String hoten = rs.getString("hoten");
				Double hsl = rs.getDouble("hsl");
				Date ns = rs.getDate("ngaysinh");
				SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy");
				String ngaysinh = d.format(ns);
			} 
			rs.close();
} catch (Exception e) {
	e.printStackTrace();
}
c. Insert

	public void insertSV(SinhVien sv) {

		try {

			Connection con = DbHelper.getInstance().getConnection();

			String sql = "insert into SinhVien(MaSinhVien, HoTen, GioiTinhNam, NgaySinh) values (?,?,?,?)";

			PreparedStatement cmd = con.prepareStatement(sql);

			cmd.setString(1, sv.getMasv());

			cmd.setString(2, sv.getHoten());

			cmd.setBoolean(3, sv.isGioitinhnam());

			cmd.setDate(4, new java.sql.Date(sv.getNgaysinh().getTime()));

			cmd.executeUpdate();

		} catch (Exception e) {

			e.printStackTrace();

		}

	}


d. Delete

try {
			//b1: Ket noi vao csdl
			Connection cn = (DPHelper.get_instance()).getConnection();
			//B2: Tao cau lenh sql
			String sql= "delete from tbl_nhanvien where manv=?";
			//B3: tao cau lenh
			PreparedStatement cmd=cn.prepareStatement(sql);
			cmd.setString(1, manv);
			//b4: Thuc hien cau lenh
} catch (Exception e) {
	e.printStackTrace();
}
e. Update

try {
			//b1: Ket noi vao csdl
			Connection cn = (DPHelper.get_instance()).getConnection();
			//B2: Tao cau lenh sql
			String sql="update tbl_nhanvien set hoten = ?, ngaysinh = ?, hsl = ?, madv = ? where manv = ?";
			//B3: tao cau lenh
			PreparedStatement cmd=cn.prepareStatement(sql);
			cmd.setString(1, hoten);
	                cmd.setDate(2, new java.sql.Date(ngaysinh.getTime()));
			cmd.setDouble(3, hsl);
			cmd.setString(4, madv);
			cmd.setString(5, manv)
} catch (Exception e) {
	e.printStackTrace();
}
C√°c ƒëo·∫°n code TXT & Java
a. Select

	public List<SinhVien> selectAll() {

		ArrayList<SinhVien> lstSV = new ArrayList<SinhVien>();

		try{

		     FileReader f = new FileReader(this.chuoiKetNoi);

		     BufferedReader b = new BufferedReader(f);

		     while(true){

		          String st = b.readLine();

		          if(st == null || st == "") break;

		          String[] tt = st.split(",");

		          lstSV.add(new SinhVien(tt[0], tt[1], Boolean.parseBoolean(tt[2]), convertToDate(tt[3])));

		     }

		     b.close();

		} catch(Exception e) {

		     e.printStackTrace();

		}

		return lstSV;

	}

b. Insert

	public void insert(SinhVien sv) {

		try {

			// m·ªü file ·ªü ch·∫ø ƒë·ªô APPEND

			FileWriter fw = new FileWriter(this.chuoiKetNoi, true);

			BufferedWriter bw = new BufferedWriter(fw);



			// ghi d√≤ng t∆∞∆°ng ·ª©ng sv

			String stNewSV = String.format("%s,%s,%s,%s\n", //

					sv.getMaSinhVien(), //

					sv.getHoTen(), //

					sv.isGioiTinhNam(), //

					convertDateToString(sv.getNgaySinh())//

			);

			bw.write(stNewSV);

			// ƒë√≥ng file l·∫°i

			bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}

	}

c. Delete

public void delete(String maSinhVien) {

		// ƒê·ªçc danh s√°ch SinhVien

		var lst = selectAll();

		

		// T√¨m v·ªã tr√≠ trong danh s√°ch m√† tr√πng v·ªõi maSinhVien

		// or nh·ªØng v·ªã tr√≠, tr∆∞·ªùng h·ª£p trong file txt c√≥ nhi·ªÅu sv c√≥ tr√πng msv --> d√πng for each

		int viTri = -1;

		for (int i = 0; i < lst.size(); i++)

			if (lst.get(i).getMaSinhVien().equals(maSinhVien)) {

				viTri = i;

				break;

			}

		

		if (viTri != -1)

			lst.remove(viTri);

		

		// Ghi to√†n b·ªô danh s√°ch n√†y v√†o file

		// - M·ªü file ·ªü ch·∫ø ƒë·ªô ghi ƒë√®

		// - foreach sv

		// 		write d√≤ng sv v√†o file

		// - ƒê√≥ng file l·∫°i

		try {

			FileWriter w = new FileWriter(this.chuoiKetNoi);

			// FileWriter w = new FileWriter(this.chuoiKetNoi, false);

	        PrintWriter ghi = new PrintWriter(w);

	        //boolean laDongDauTien = true;

	        for (var sv : lst) {

				String stNewSV = String.format("%s,%s,%s,%s\n", //

						sv.getMaSinhVien(), //

						sv.getHoTen(), //

						sv.isGioiTinhNam(), //

						convertDateToString(sv.getNgaySinh())//

				);

				ghi.write(stNewSV);

	        }

	        ghi.close();

		} catch (Exception e) {

			e.printStackTrace();

		}

	}

d. Convert

	private Date convertToDate(String stDMY) {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

		Date kq = null;

		try {

			kq = sdf.parse(stDMY);

		} catch (ParseException e) {

			e.printStackTrace();

		}

		return kq;

	}



	private String convertDateToString(Date d) {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

		String strDay = sdf.format(d);

		return strDay;

	}

V·ªõi ArrayList
üß† C√°c ph∆∞∆°ng th·ª©c c·ªßa ArrayList:

Add(Object) CH·ªà S·ªê ƒê·∫¶U TI√äN L√Ä 0
Size(): S·ªë ph·∫ßn t·ª≠ trong ArayList
Get(i): tr·∫£ v·ªÅ Object t·∫°i ch·ªâ s·ªë i.
Remove(i): x√≥a ph·∫ßn t·ª≠ th·ª© i contains("th·ª© c·∫ßn t√¨m"): t√¨m ki·∫øm tr·ª±c ti·∫øp ph·∫ßn t·ª≠. K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† true n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ false.
arraylist.set(int index, E element): kh√¥ng g√°n tr·ª±c ti·∫øp ki·ªÉu a[i] = a[j] ƒë∆∞·ª£c m√† ph·∫£i:
tmp = lst.get(i);
lst.set(i, lst.get(j));
lst.set(j, tmp);
V·ªõi Date
public class DATE {
	SimpleDateFormat d = new SimpleDateFormat("HH:mm dd/MM/yyyy");
	//String ns = "2000-09-19";
	//Doi String --> Date
	//Date ngay = d.parse(ns);

	//Chuy·ªÉn date -> String
	//String t = d.format(<kieu Date>); 
	
	//V·ªöI SQL
//	//Doi chuoi sang util Date
//	SimpleDateFormat d = new SimpleDateFormat("yyyy-MM-dd");
//	Date ngay = d.parse(ns);
//	//Doi ngay util sang ngay sql
//	cmd.setDate(4, new java.sql.Date(ngay.getTime()));
}
I. Simple Factory
2. D·ª±ng
1. T·∫°o interface chung, c√≥ ph∆∞∆°ng th·ª©c chung
Interface ConV·∫≠t

public interface ConV·∫≠t {
	void k√™u();
}
2. T·∫°o c√°c class implements k·∫ø th·ª´a cho interface v·ª´a t·∫°o ·ªü B1 (t·ª©c: ph·∫£i override l·∫°i c√°c ph∆∞∆°ng th·ª©c c·ªßa interface)
Class Ch√≥

public class Ch√≥ implements ConV·∫≠t  {
	@Override
	public void k√™u() {
		System.out.println("G√¢u g√¢u");		
	}
}
Class M√®o

public class M√®o implements ConV·∫≠t {
	@Override
	public void k√™u() {
		System.out.println("Meo meo");
	}
}
3. T·∫°o class Factory - nh√† m√°y s·∫£n xu·∫•t c√°c class ·ªü B2
T·∫°o h√†m tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng c·ªßa interface v·ªõi t√™n h√†m c√≥ th·ªÉ l√† <get_t√™nInterface>(String lo·∫°i)

Th√¢n h√†m:
if(lo·∫°i == ‚Äú<t√™n 1 ƒë·ªëi t∆∞·ª£ng c·ªßa class ·ªü B2)

return new 1_class_·ªü_B2();

else if(lo·∫°i == ‚Äú<t√™n 1 kh√°c ƒë·ªëi t∆∞·ª£ng c·ªßa class ·ªü B2)

return new 1_class_kh√°c_·ªü_B2();

else ‚Ä¶.

Class ConVatFactory

class ConV·∫≠tFactory {
	public ConV·∫≠t getConV·∫≠t(String lo·∫°i) {
		if (lo·∫°i == "G√Ä")
			return new G√†();
		else if (lo·∫°i == "CH√ì")
			return new Ch√≥();
		else 
			return new M√®o();
	}
}
4. Test
T·∫°o m·ªõi new 1 ƒë·ªëi t∆∞·ª£ng Factory f

Khai b√°o 1 ƒë·ªëi t∆∞·ª£ng c·ªßa interface x

Kh·ªüi t·∫°o interface x = f.get_t√™nInterface("lo·∫°i");
Th·ªÉ hi·ªán ho·∫°t c·∫£nh ƒë·ªëi t∆∞·ª£ng x.ph∆∞∆°ng_th·ª©c_c·ªßa_interface();
Code

public class ChuongTrinh {
	public static void main(String[] args) {
		testConV·∫≠t();
	}

	private static void testConV·∫≠t() {
		// 1. Kh·ªüi t·∫°o con v·∫≠t x
		ConV·∫≠tFactory f = new ConV·∫≠tFactory();
		ConV·∫≠t animal = f.getConV·∫≠t("CH√ì");

		// 2. Th·ªÉ hi·ªán ho·∫°t c·∫£nh c·ªßa game
		animal.k√™u();
	}
}
II. Factory Method
2. D·ª±ng
1. T·∫°o interface chung, c√≥ ph∆∞∆°ng th·ª©c chung
2. T·∫°o c√°c class implements k·∫ø th·ª´a cho interface v·ª´a t·∫°o ·ªü B1 (t·ª©c: ph·∫£i override l·∫°i c√°c ph∆∞∆°ng th·ª©c c·ªßa interface)
3. T·∫°o m·ªôt l·ªõp abstract Factory chung cho c√°c ƒë·ªëi t∆∞·ª£ng
ƒê·ªãnh nghƒ©a ph∆∞∆°ng th·ª©c Factory Method ƒë·ªÉ t·∫°o ra c√°c ƒë·ªëi t∆∞·ª£ng interface.

public abstract class ConV·∫≠tFactory {
	abstract public ConV·∫≠t getConV·∫≠t();
}
4. T·ª´ l·ªõp abstract tr√™n, c√†i ƒë·∫∑t c√°c l·ªõp Factory cho c√°c lo·∫°i ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ
public class G√†Factory extends ConV·∫≠tFactory {
	@Override
	public ConV·∫≠t getConV·∫≠t() {
		return new G√†();
	}
}
5. S·ª≠ d·ª•ng trong client-code
static void testFactoryMethod() {
		// 1. Khai b√°o
		ConV·∫≠t x;

		// 2. T·∫°o ƒë·ªëi t∆∞·ª£ng
		x = (new G√†Factory()).getConV·∫≠t();

		// 3. Th·ªÉ hi·ªán ho·∫°t c·∫£nh
		x.k√™u();
		
		//G·ªçn:
		ConV·∫≠t animal = (new G√†Factory().getConV·∫≠t());
		animal.k√™u();
	}
III. Abstract Factory
2. D·ª±ng
1. X√°c ƒë·ªãnh Interface cho c√°c Abstract Product:
T·∫°o c√°c interface ho·∫∑c l·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªÉ ƒë·∫°i di·ªán cho c√°c s·∫£n ph·∫©m m√† Abstract Factory s·∫Ω t·∫°o ra.

Interface DongVatAnCo

package abstract_factory;

public interface DongVatAnCo {
	void ch·∫°y();
}

Interface DongVatAnThit

package abstract_factory;

public interface DongVatAnThit {
	void ƒëu·ªïiTheo(DongVatAnCo x);
}
2. T·∫°o c√°c l·ªõp c·ª• th·ªÉ c·ªßa c√°c Product:
Tri·ªÉn khai c√°c interface ƒë√£ x√°c ƒë·ªãnh ƒë·ªÉ t·∫°o ra c√°c s·∫£n ph·∫©m c·ª• th·ªÉ.

Class NguaVan

package style1;

import abstract_factory.DongVatAnCo;

public class NguaVan implements DongVatAnCo {
	@Override
	public void ch·∫°y() {
		System.out.printf("Ng·ª±a v·∫±n ch√¢u Phi ch·∫°y :D", this.toString());
	}
}

Class SuTu

package style1;

import abstract_factory.DongVatAnCo;
import abstract_factory.DongVatAnThit;

public class SuTu implements DongVatAnThit {

	@Override
	public void ƒëu·ªïiTheo(DongVatAnCo x) {
		System.out.printf("S∆∞ t·ª≠ ch√¢u Phi ƒëu·ªïi\\n", this.toString());
		x.ch·∫°y();
	}
}
Class Soc

package style2;

import abstract_factory.DongVatAnCo;

public class Soc implements DongVatAnCo {
	@Override
	public void ch·∫°y() {
		System.out.printf("S√≥c ch√¢u √Å nh·∫£y", this.toString());
	}
}
Class SoiRung

package style2;

import abstract_factory.DongVatAnCo;
import abstract_factory.DongVatAnThit;

public class SoiRung implements DongVatAnThit {
	@Override
	public void ƒëu·ªïiTheo(DongVatAnCo x) {
		System.out.printf("S√≥i r·ª´ng ch√¢u √Å ƒëu·ªïi\\n", this.toString());
		x.ch·∫°y();
	}
}
3. X√°c ƒë·ªãnh Abstract Class / Interface cho Abstract Factory:
T·∫°o m·ªôt interface ho·∫∑c l·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªÉ ƒë·∫°i di·ªán cho Abstract Factory, ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫°o ra c√°c s·∫£n ph·∫©m tr·ª´u t∆∞·ª£ng.

Class DongVatFactory

package abstract_factory;

public abstract class DongVatFactory {
	public abstract DongVatAnCo createDongVatAnCo();
	public abstract DongVatAnThit createDongVatAnThit();
}
4. T·∫°o c√°c l·ªõp c·ª• th·ªÉ c·ªßa Abstract Factory:
Tri·ªÉn khai Abstract Factory b·∫±ng c√°ch cung c·∫•p c√°c c√†i ƒë·∫∑t c·ª• th·ªÉ cho c√°c ph∆∞∆°ng th·ª©c t·∫°o ra s·∫£n ph·∫©m tr·ª´u t∆∞·ª£ng.

Class FactoryStyle1

package style1;

import abstract_factory.DongVatAnCo;
import abstract_factory.DongVatAnThit;
import abstract_factory.DongVatFactory;

public class FactoryStyle1 extends DongVatFactory {
	@Override
	public DongVatAnCo createDongVatAnCo() {
		return new NguaVan();
	}

	@Override
	public DongVatAnThit createDongVatAnThit() {
		return new SuTu();
	}
}
Class FactoryStyle2

package style2;

import abstract_factory.DongVatAnCo;
import abstract_factory.DongVatAnThit;
import abstract_factory.DongVatFactory;

public class FactoryStyle2 extends DongVatFactory{
	@Override
	public DongVatAnCo createDongVatAnCo() {
		return new Soc();
	}

	@Override
	public DongVatAnThit createDongVatAnThit() {
		return new SoiRung();
	}
}
5. S·ª≠ d·ª•ng Abstract Factory:
S·ª≠ d·ª•ng c√°c l·ªõp c·ª• th·ªÉ c·ªßa Abstract Factory ƒë·ªÉ t·∫°o ra c√°c s·∫£n ph·∫©m m√† kh√¥ng c·∫ßn quan t√¢m ƒë·∫øn chi ti·∫øt c·ª• th·ªÉ c·ªßa t·ª´ng s·∫£n ph·∫©m.

Class ChuongTrinh

package ui;

import abstract_factory.DongVatAnCo;
import abstract_factory.DongVatAnThit;
import abstract_factory.DongVatFactory;
import style1.FactoryStyle1;

public class ChuongTrinh {
	public static void main(String[] args) {
		test();
	}

	private static void test() {
		// 1. T·∫°o nh√† m√°y theo style
		DongVatFactory f;
		f = new FactoryStyle1();
//		f = new FactoryStyle2();

		// 2. T·∫°o & s·ª≠ d·ª•ng c√°c ƒë·ªëi t∆∞·ª£ng thu·ªôc 
		// h·ªá sinh th√°i c·ªßa nh√† m√°y
		DongVatAnThit x = f.createDongVatAnThit();
		DongVatAnCo y = f.createDongVatAnCo();

		// 3. S·ª≠ d·ª•ng c√°c ƒë·ªëi t∆∞·ª£ng THU·ªòC C√ôNG STYLE
		x.ƒëu·ªïiTheo(y);
	}

}
IV. Singleton
2. D·ª±ng
1. T·∫°o m·ªôt h√†m t·∫°o (constructor) v·ªõi t·∫ßm truy xu·∫•t private.
2. Khai b√°o m·ªôt bi·∫øn static private _instance ki·ªÉu Singleton.
3. T·∫°o m·ªôt ph∆∞∆°ng th·ª©c static public, th∆∞·ªùng ƒë∆∞·ª£c g·ªçi l√† getInstance(),
ƒê·ªÉ tr·∫£ v·ªÅ th·ªÉ hi·ªán (instance) duy nh·∫•t c·ªßa Singleton. 

4. S·ª≠ d·ª•ng Singleton th√¥ng qua ph∆∞∆°ng th·ª©c getInstance().
B·∫±ng c√°ch g·ªçi ph∆∞∆°ng th·ª©c n√†y, s·∫Ω nh·∫≠n ƒë∆∞·ª£c th·ªÉ hi·ªán duy nh·∫•t c·ªßa Singleton.

class DbHelper {
	private Connection con = null;
	public Connection getConnection() {
		return this.con;
	}

	// 1. t·∫°o bi·∫øn static c·ªßa ch√≠nh l·ªõp n√†y
	private static DbHelper _instance = null;
	
	// 2. ƒë·ªãnh nghƒ©a h√†m constructor cho l·ªõp n√†y: private
	private DbHelper() throws SQLException{
		String connectionUrl = "jdbc:sqlserver://localhost; databaseName=YourDB;user=YourUsername; password=YourPassword;encrypt=true; trustServerCertificate=true";
		// h√†m getConnection n√†y kh√¥ng ph·∫£i h√†m c·ªßa class DbHelper
		con = DriverManager.getConnection(connectionUrl);
	}
	
	// 3. ƒë·ªãnh nghƒ©a h√†m getInstance()
	public static DbHelper getInstance throws SQLException() {
		if (_instance == null)
			_instance = new DbHelper();
			
		return _instance;
	}
}
V. Builder
2. D·ª±ng
1. Khai b√°o t·∫•t c·∫£ thu·ªôc t√≠nh nh∆∞ th√¥ng th∆∞·ªùng, ph√¢n ra 2 nh√≥m: thu·ªôc t√≠nh b·∫Øt bu·ªôc & thu·ªôc t√≠nh tu·ª≥ ch·ªçn.
2. Khai b√°o inner class (public static class Builder) v·ªõi ƒë·∫∑c ƒëi·ªÉm
C√≥ t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa class ngo√†i

C√≥ constructor v·ªõi tham s·ªë l√† t·∫•t c·∫£ thu·ªôc t√≠nh b·∫Øt bu·ªôc c√≥ ‚Äî nh∆∞ v√≠ d·ª• tr√™n l√† 2 thu·ªôc t√≠nh ƒë∆∞·ªùng v√† b·ªôt, t∆∞∆°ng ·ª©ng v·ªõi constructor public Builder(double ƒë∆∞·ªùng, double b·ªôt).

V·ªõi m·ªói thu·ªôc t√≠nh tu·ª≥ ch·ªçn, t·∫°o ra ph∆∞∆°ng th·ª©c d·∫°ng

public Builder t√™nThu·ªôcT√≠nh(KieuDuLieu value) {
	this.t√™nThu·ªôcT√≠nh = value;
	return this;
}
C√≥ h√†m build ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a nh∆∞ sau

public L·ªõpNgo√†i build() {
	return new L·ªõpNgo√†i(this);
}
h√†m n√†y g·ªçi ƒë·∫øn constructor c·ªßa l·ªõp b√™n ngo√†i. V√† hi·ªÉn nhi√™n, ch√∫ng ta ph·∫£i ƒë·ªãnh nghƒ©a constructor nh∆∞ v·∫≠y ·ªü l·ªõp b√™n ngo√†i

3. ƒê·ªãnh nghƒ©a constructor cho l·ªõp b√™n ngo√†i, v·ªõi d·∫°ng :
private L·ªõpNgo√†i(Builder b) {
		// G√°n t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa Builder ra thu·ªôc t√≠nh c·ªßa l·ªõp ngo√†i
		// V√≠ d·ª•
		this.ƒë∆∞·ªùng = b.ƒë∆∞·ªùng;
		this.b·ªôt = b.b·ªôt;

		this.n∆∞·ªõcD·ª´a = b.n∆∞·ªõcD·ª´a;
		this.cacao = b.cacao;
	}
4. Vi·ªác s·ª≠ d·ª•ng l·ªõp v·ªõi m·∫´u Builder l√† r·∫•t ƒë∆°n gi·∫£n:
		B√°nh b = new B√°nh.Builder(1.5, 0.7)
				.cacao(5)
				.n∆∞·ªõcD·ª´a(4.5)
				.build();
VI. Prototype
2. D·ª±ng
1. ƒê·ªãnh nghƒ©a class nh∆∞ b√¨nh th∆∞·ªùng, v·ªõi c√°c getter, setter, constructor d√πng c√°c ƒë·ªëi s·ªë
class TenLop {
		public TenLop(String field1, int field2, ...) {
				this.field1 = field1;
				this.field2 = field2;
				...
		}
		...
}
2. B·ªï sung constructor v·ªõi ƒë·ªëi s·ªë l√† class ƒë√≥
class TenLop {
		public TenLop(TenLop x) {
				this.field1 = x.field1;
				this.field2 = x.field2;
				...
		}
}
3. B·ªï sung h√†m taoBanSao c√≥ d·∫°ng
class TenLop {		
		public TenLop taoBanSao() {
				return new TenLop(this);
		}
}
4. ƒê·ªëi v·ªõi nh·ªØng class k·∫ø th·ª´a class n√†y th√¨ ph·∫£i th·ª±c hi·ªán hai vi·ªác
T·∫°o constructor v·ªõi ƒë·ªëi s·ªë l√† class con
Override h√†m taoBanSao
Ch·∫≥ng h·∫°n, nh∆∞ d∆∞·ªõi ƒë√¢y

class TenLopCon extends TenLop {
		private double field3; // th√™m thu·ªôc t√≠nh m·ªõi
		
		public TenLopCon(TenLopCon x) {
			// g·ªçi h√†m n√†y ƒë·ªÉ kh·ªüi t·∫°o c√°c th.t√≠nh ·ªü l·ªõp cha
				super(x); 
			// g√°n th√™m th.t√≠nh m·ªõi, ch·ªâ c√≥ ·ªü l·ªõp con
				this.field3 = x.field3; 
		}
		
		@Overide
		public TenLop taoBanSao() {
				return new TenLopCon(this);
		}
}
VII. Adapter
2. D·ª±ng
1. X√°c ƒë·ªãnh giao di·ªán ho·∫∑c l·ªõp kh√¥ng t∆∞∆°ng th√≠ch
ƒê·∫ßu ti√™n, x√°c ƒë·ªãnh hai ho·∫∑c nhi·ªÅu th√†nh ph·∫ßn mu·ªën t√≠ch h·ª£p v·ªõi nhau nh∆∞ng c√≥ c√°c giao di·ªán kh√¥ng t∆∞∆°ng th√≠ch.

·ªû ph·∫ßn BT, 2 th√†nh ph·∫ßn kh√¥ng t∆∞∆°ng th√≠ch l√† SinhVien v√† CongNhan

2. T·∫°o ra m·ªôt (interface) Adapter
C·∫ßn t·∫°o ra m·ªôt l·ªõp m·ªõi, g·ªçi l√† Adapter, m√† s·∫Ω chuy·ªÉn ƒë·ªïi giao di·ªán c·ªßa m·ªôt th√†nh ph·∫ßn ƒë·ªÉ n√≥ c√≥ th·ªÉ l√†m vi·ªác v·ªõi c√°c th√†nh ph·∫ßn kh√°c.

M√¥ t·∫£ m·ªôt giao th·ª©c m√† c√°c l·ªõp kh√°c ph·∫£i tu√¢n theo ƒë·ªÉ c√≥ th·ªÉ l√†m vi·ªác v·ªõi client code.

interface PhanTu

public interface PhanTu {
	String getXepLoai();
	String getTen();
	String getLoaiDoiTuong();
}
3. Tri·ªÉn khai Adapter
C√°c l·ªõp tri·ªÉn khai Adapter n√†y s·∫Ω tri·ªÉn khai giao di·ªán mong mu·ªën v√† ch·ª©a m·ªôt tham chi·∫øu ƒë·∫øn th√†nh ph·∫ßn kh√¥ng t∆∞∆°ng th√≠ch. L∆∞u √Ω: ph·∫£i t·∫°o constructor v·ªõi tham chi·∫øu n√†y.

Class PhanTuCuaSinhVien

import com.peter.dp.SinhVien;
public class PhanTuCuaSinhVien implements PhanTu {
	private SinhVien sv;
	
	public PhanTuCuaSinhVien(SinhVien sv) {
		super();
		this.sv = sv;
	}

	@Override
	public String getXepLoai() {
		double dtb = sv.getDiemTrungBinh();
	    if (dtb >= 8.5)
	        return "A";
	    else if (dtb >= 7)
	        return "B";
	    else if (dtb >= 5.5)
	        return "C";
	    else if (dtb >= 4.0)
	        return "D";
	    else
	        return "X";
	}

	@Override
	public String getTen() {
		return sv.getHoTen();
	}

	@Override
	public String getLoaiDoiTuong() {
		return "SV";
	}
}
Class PhanTuCuaCongNhan

import java.util.Date;
import com.peter.dp.CongNhan;

public class PhanTuCuaCongNhan implements PhanTu {
	private CongNhan cn;
	
	public PhanTuCuaCongNhan(CongNhan cn) {
		super();
		this.cn = cn;
	}

	@Override
	public String getXepLoai() {
		Date now = new Date();
        Date startDate = (Date) cn.getNgayBatDauLamViec();
        int namKinhNghiem = now.getYear() - startDate.getYear();
		if (namKinhNghiem < 1) {
            return "X";
        } else if (namKinhNghiem >= 1 && namKinhNghiem <= 5) {
            return "D"; 
        } else if (namKinhNghiem <= 10) {
            return "C"; 
        } else if (namKinhNghiem <= 20) {
            return "B";
        } else {
            return "A"; 
        }
	}

	@Override
	public String getTen() {
		return cn.getHoTen();
	}

	@Override
	public String getLoaiDoiTuong() {
		return "CN";
	}
}
4. S·ª≠ d·ª•ng Adapter
S·ª≠ d·ª•ng Adapter ƒë·ªÉ g·ªçi c√°c ph∆∞∆°ng th·ª©c t·ª´ c√°c th√†nh ph·∫ßn kh√¥ng t∆∞∆°ng th√≠ch. (~ t·∫•t c·∫£ quy v·ªÅ interface Adapter ·ªü B2 th√¥ng qua constructor c·ªßa c√°c l·ªõp tri·ªÉn khai interface: interface = new trienkhai_interface(object_khong_tuong_thich_B1)

Class Main

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.peter.dp.CongNhan;
import com.peter.dp.CongNhanReader;
import com.peter.dp.SinhVien;
import com.peter.dp.SinhVienReader;

public class Main {
    public static void main(String[] args) throws IOException, ParseException {        
        // ƒê·ªçc danh s√°ch sinh vi√™n v√† c√¥ng nh√¢n t·ª´ file
        List<**SinhVien**> lstSV = SinhVienReader.readFromFile("sv.txt");
        List<CongNhan> lstCN = CongNhanReader.readFromFile("cn.txt");
        
        // T·∫°o danh s√°ch t·ªïng h·ª£p c√°c ƒë·ªëi t∆∞·ª£ng SinhVien v√† CongNhan
        List<PhanTu> lst = new ArrayList<PhanTu>();
        for (SinhVien sv: lstSV) {
        	lst.add(new PhanTuCuaSinhVien(sv));
        }
        
        for (CongNhan cn: lstCN) {
        	lst.add(new PhanTuCuaCongNhan(cn));
        }**
        /*Collections.sort(lst, (nv1, nv2) -> {
            String priority1 = nv1.getXepLoai();
            String priority2 = nv2.getXepLoai();
            return priority1.compareTo(priority2);
        });*/
        
        PhanTu tmp = null;
        for (int i = 0; i < lst.size() - 1; i++) {
            for (int j = i + 1; j < lst.size(); j++) {
                String x = lst.get(i).getXepLoai();
                String y = lst.get(j).getXepLoai();
                if (x.compareTo(y) > 0) {
                    tmp = lst.get(i);
                    lst.set(i, lst.get(j));
                    lst.set(j, tmp);
                }
            }
        }
        
        // In ra m√†n h√¨nh danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ s·∫Øp x·∫øp
        System.out.println("STT           H·ªç t√™n               Lo·∫°i         ƒê·ªô ∆∞u ti√™n");
        for (int i = 0; i < lst.size(); i++) {
            System.out.printf("%-14d%-22s%-16s%s\\n", i + 1, lst.get(i).getTen(), lst.get(i).getLoaiDoiTuong(), lst.get(i).getXepLoai());
        }
    }
}
VIII. Decorator KH√ì
2. D·ª±ng
1. T·∫°o interface Component
X√°c ƒë·ªãnh interface ho·∫∑c l·ªõp c∆° s·ªü: ƒê·∫ßu ti√™n, c·∫ßn x√°c ƒë·ªãnh m·ªôt interface ho·∫∑c m·ªôt l·ªõp c∆° s·ªü. ƒê√¢y l√† l·ªõp m√† b·∫°n mu·ªën m·ªü r·ªông t√≠nh nƒÉng c·ªßa n√≥ th√¥ng qua vi·ªác s·ª≠ d·ª•ng decorator.

interface Cafe

package component;

public interface Cafe {
	String getM√¥T·∫£();
	double getGi√°();
}
2. T·∫°o l·ªõp c·ª• th·ªÉ, c√†i ƒë·∫∑t c√°c h√†m trong interface Component
Class CafeCh·ªìn

package component;
public class CafeCh·ªìn implements Cafe {
	@Override
	public String getM√¥T·∫£() {
		return "Cafe ch·ªìn";
	}

	@Override
	public double getGi√°() {
		return 50000;
	}
}
Class CafePhin

package component;
public class CafePhin implements Cafe {
	@Override
	public String getM√¥T·∫£() {
		return "Cafe phin";
	}

	@Override
	public double getGi√°() {
		return 8000;
	}
}
3. T·∫°o l·ªõp abtract BaseDecorator, c√†i ƒë·∫∑t c√°c h√†m trong interface Component (implement interface tr√™n) ‚Äî d∆∞·ªõi d·∫°ng abstract. L·ªõp n√†y ch·ª©a m·ªôt tham chi·∫øu protected ƒë·∫øn interface Component;  (nh·ªõ t·∫°o constructor v·ªõi tham chi·∫øu n√†y). C√≥ h√†m getter tham chi·∫øu ƒë√≥. Override l·∫°i c√°c h√†m c·ªßa interface d∆∞·ªõi d·∫°ng abstract ƒë·ªÉ c√°c h√†m extend n√≥ ƒëi·ªÅu ch·ªânh c·ª• th·ªÉ
Class TrangTr√≠ChoCafe

package deco;
import component.Cafe;
public abstract class TrangTr√≠ChoCafe implements Cafe {
	
	protected Cafe cafe;
	
	public Cafe getCafe() {
		return cafe;
	}

	@Override
	public abstract String getM√¥T·∫£();

	@Override
	public abstract double getGi√°();
}
3. T·∫°o l·ªõp c·ª• th·ªÉ ConcreteDecorator, k·∫ø th·ª´a BaseDecorator, c√†i ƒë·∫∑t c√°c h√†m abstract ƒë∆∞·ª£c k·∫ø th·ª´a t·ª´ BaseDecorator. Nh·ªõ t·∫°o constructor tham s·ªë l√† interface ·ªü B1 (this.tham_chieu_∆°_B2 = tham_chieu_o_B2)
Class ƒê∆∞·ªùngTrangTr√≠ChoCafe

package deco;
import component.Cafe;

public class ƒê∆∞·ªùngTrangTr√≠ChoCafe extends TrangTr√≠ChoCafe {

	@Override
	public String getM√¥T·∫£() {
		// m√¥ t·∫£ c·ªßa ly caf√© + ", ƒë∆∞·ªùng"
		return this.cafe.getM√¥T·∫£() + " + ƒë∆∞·ªùng";
	}

	@Override
	public double getGi√°() {
		return this.cafe.getGi√°() + 500;
	}
	
	public int getS·ªëL·ªõpƒê∆∞·ªùngTrangTr√≠(Cafe cafe) {
		// ƒë·∫øm xem c√≥ bao nhi√™u l·ªõp
		// ƒë∆∞·ªùng-trang-tr√≠-cho-cafe ƒë√£ th√™m v√†o cafe?
		int nƒê∆∞·ªùngTrangTr√≠ = 0;
		Cafe x2 = cafe;
		while (true) {
			if (x2 instanceof TrangTr√≠ChoCafe) {
				// x2 ƒëang l√† l·ªõp trang tr√≠
				if (x2 instanceof ƒê∆∞·ªùngTrangTr√≠ChoCafe)
					nƒê∆∞·ªùngTrangTr√≠++;
				
				// chuy·ªÉn xu·ªëng l·ªõp trang tr√≠ ti·∫øp theo
				// ho·∫∑c l√† cafe
				x2 = ((TrangTr√≠ChoCafe) x2).getCafe();
			}
			else
				break;
		}
		
		return nƒê∆∞·ªùngTrangTr√≠;
	}
	
	public ƒê∆∞·ªùngTrangTr√≠ChoCafe(Cafe cafe) throws Exception {
//		if (getS·ªëL·ªõpƒê∆∞·ªùngTrangTr√≠(cafe) >= 2)
//			throw new Exception("Kh√¥ng ƒë∆∞·ª£c th√™m qu√° 2 l·ªõp trang tr√≠ ƒë∆∞·ªùng");
		this.cafe = cafe;
	}
}

Class S·ªØaTrangTr√≠ChoCafe

package deco;
import component.Cafe;

public class S·ªØaTrangTr√≠ChoCafe extends TrangTr√≠ChoCafe {

	@Override
	public String getM√¥T·∫£() {
		return this.cafe.getM√¥T·∫£() + " + s·ªØa";
	}

	@Override
	public double getGi√°() {
		return this.cafe.getGi√°() + 2000;
	}

	public S·ªØaTrangTr√≠ChoCafe(Cafe cafe) throws Exception {
//		boolean daTrangTriSua = false;
//		Cafe x = cafe;
//		while (true) {
//			if (x instanceof TrangTr√≠ChoCafe) {
//				if (x instanceof S·ªØaTrangTr√≠ChoCafe)
//					daTrangTriSua = true;
//				x = ((TrangTr√≠ChoCafe) x).cafe;
//			}
//			else
//				break;
//		}
//		if (daTrangTriSua)
//			throw new Exception("Kh√¥ng ƒë∆∞·ª£c th√™m s·ªØa 2 l·∫ßn");
		this.cafe = cafe;
	}
}
Class RhumTrangTr√≠ChoCafe

package deco;

import component.Cafe;

public class RhumTrangTr√≠ChoCafe extends TrangTr√≠ChoCafe {

	@Override
	public String getM√¥T·∫£() {
		return this.cafe.getM√¥T·∫£() + " + rhum";
	}

	@Override
	public double getGi√°() {
		return this.cafe.getGi√°() + 5500;
	}

	// H√†m constructor
	// Th√™m l·ªõp trang tr√≠ Rhum v√†o cho ly caf√© x
	public RhumTrangTr√≠ChoCafe(Cafe x) throws Exception {
		// Ki·ªÉm tra xem x tr∆∞·ªõc ƒë√≥ ƒë√£ th√™m ƒê∆∞·ªùng 
		// ho·∫∑c S·ªØa hay ch∆∞a
		boolean daCoDuongHoacSua = false;
		Cafe x2 = x;
		while (true) {
			if (x2 instanceof TrangTr√≠ChoCafe) {
				// Th·ª±c hi·ªán ki·ªÉm tra l·ªõp trang tr√≠ cho x2
				if (x2 instanceof ƒê∆∞·ªùngTrangTr√≠ChoCafe || x2 instanceof S·ªØaTrangTr√≠ChoCafe) {
					daCoDuongHoacSua = true;
					break;
				}
				x2 = ((TrangTr√≠ChoCafe) x2).getCafe();
			} else
				break;
		}
		
		if (daCoDuongHoacSua)
			throw new Exception("Kh√¥ng ƒë∆∞·ª£c trang tr√≠ th√™m Rhum khi ƒë√£ c√≥ ƒë∆∞·ªùng/s·ªØa");
		
		this.cafe = x;
	}
}
D√πng l·ªõp ConcreteDecorator ƒë·ªÉ b·ªï sung cho c√°c ƒë·ªëi t∆∞·ª£ng giao di·ªán Component

4. S·ª≠ d·ª•ng
Class ChuongTrinh

import java.util.ArrayList;
import java.util.List;

import component.Cafe;
import component.CafeCh·ªìn;
import component.CafePhin;
import component.CafeRangXay;
import deco.RhumTrangTr√≠ChoCafe;
import deco.S·ªØaTrangTr√≠ChoCafe;
import deco.TrangTr√≠ChoCafe;
import deco.ƒê∆∞·ªùngTrangTr√≠ChoCafe;

public class ChuongTrinh {
	static void testCafe() throws Exception {
		Cafe x;
		
		x = new CafeCh·ªìn();
		System.out.printf("%s, gi√°: %g\\n", x.getM√¥T·∫£(), x.getGi√°());
		
		Cafe x2 = null;
//		x2 = new S·ªØaTrangTr√≠ChoCafe(x);
//		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());

		x2 = new RhumTrangTr√≠ChoCafe(x);
		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());

//		x2 = new S·ªØaTrangTr√≠ChoCafe(x2);
//		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());
//		
//		x2 = new ƒê∆∞·ªùngTrangTr√≠ChoCafe(x2);
//		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());

		x2 = new RhumTrangTr√≠ChoCafe(x2);
		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());
		
		x2 = new ƒê∆∞·ªùngTrangTr√≠ChoCafe(x2);
		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());
		
		x2 = new S·ªØaTrangTr√≠ChoCafe(x2);
		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());
		
		x2 = new RhumTrangTr√≠ChoCafe(x2);
		System.out.println(x2.getM√¥T·∫£() + ", gi√° " + x2.getGi√°());
	}

	public static void main(String[] args) {
		try {
			testCafe();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
IX. Composite
3. D·ª±ng
Ph·∫£i ƒë·∫£m b·∫£o m√¥ h√¨nh t∆∞∆°ng ·ª©ng c√≥ d·∫°ng t∆∞∆°ng t·ª± nh∆∞ c·∫•u tr√∫c h√¨nh c√¢y. ƒê√¢y l√† y·∫øu t·ªë ti√™n quy·∫øt. V·ªõi b·∫£o ƒë·∫£m n√†y, chia nh·ªè c√°c ph·∫ßn t·ª≠ th√†nh 2 lo·∫°i: ph·∫ßn t·ª≠ ƒë∆°n v√† ph·∫ßn t·ª≠ ph·ª©c. Ph·∫ßn t·ª≠ ph·ª©c c√≥ th·ªÉ ch·ª©a v·ª´a ph·∫ßn t·ª≠ ƒë∆°n v·ª´a ph·∫ßn t·ª≠ ph·ª©c kh√°c.

1. X√°c ƒë·ªãnh danh s√°ch c√°c h√†m chung ƒë∆∞·ª£c th·ª±c hi·ªán chung cho c·∫£ ph·∫ßn t·ª≠ ƒë∆°n v√† ph·∫ßn t·ª≠ ph·ª©c ‚Üí ƒë·ªãnh nghƒ©a giao di·ªán Component. /k…ômÀàp…ô än…ônt/
Giao di·ªán chung cho c·∫£ l·ªõp ƒë∆°n gi·∫£n & l·ªõp ph·ª©c ‚Äî Component

public interface Component {
	long getTotalSize();
	***void editPath(String str);
	String getName();***
}
2. T·∫°o class cho ph·∫ßn t·ª≠ ƒë∆°n, implement Component. C√≥ th·ªÉ c√≥ nhi·ªÅu class ƒë∆°n nh∆∞ th·∫ø.
L·ªõp l√° File

@lombok.AllArgsConstructor
@lombok.Getter 
@lombok.Setter
public class File implements Component {
		
		private String name;
		private long size;
	
		@Override
		public long getTotalSize() {
			return this.size;
		}

		***@Override
		public void editPath(String str) {
			setName(str + this.name);
		}***
}
3. T·∫°o class cho ph·∫ßn t·ª≠ ph·ª©c, implement Component. Trong class n√†y s·∫Ω c√≥ m·ªôt danh s√°ch (List<Component>) ch·ª©a tham chi·∫øu c·ªßa c√°c ph·∫ßn t·ª≠ con (ki·ªÉu Component). N√≥ l√†m vi·ªác v·ªõi c√°c ph·∫ßn t·ª≠ con th√¥ng qua giao di·ªán c·ªßa Component.
Code tham kh·∫£o

L·ªõp ph·ª©c Folder

import java.util.List;
import java.util.ArrayList;
@lombok.Getter
@lombok.Setter
public class Folder implements Component {
	
	private String name;

	// danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng ch·ª©a trong th∆∞ m·ª•c n√†y
	private List<Component> lstItem = new ArrayList<>();

	public Folder(String name, List<Component> lstItem) {
		super();
		this.name = name;
		this.lstItem = lstItem;
		***editChildPath();***
	}
	
	@Override
	public long getTotalSize() {
		long kq = 0;
		for (Component x : this.lstItem)
			kq += x.getTotalSize();

		return kq;
	}

	public List<Component> getLstItem() {
		return lstItem;
	}

	***@Override
	public void editPath(String str) {
		setName(str + this.name);
		for(Component x: this.lstItem) {
			x.editPath(str);
		}
		
	}
	
	private void editChildPath() {
		for(Component x: this.lstItem) {
			x.editPath(name + "/");
		}
	}***
}
N·∫øu c·∫ßn c√≥ h√†m add

    public void add(Compoment c) {
        lstItem.add(c);
    }

    public void add(Component... components) {
        lstItem.addAll(Arrays.asList(components));
    }

    public void remove(Component c) {
        lstItem.remove(child);
    }

    public void remove(Component... components) {
        lstItem.removeAll(Arrays.asList(components));
    }

    public void clear() {
        lstItem.clear();
    }
Ch∆∞∆°ng tr√¨nh minh ho·∫°

import java.util.Arrays;

public class ChuongTrinh {

	public static void main(String[] args) {
		/*
		LAPTRINH
		|__JAVA
		|    |__baitap01 (5 kb)
		|    |__baitap02 (3 kb)
		|    |__LYTHUYET
		|        |__abc (12 kb)
		|__C#
		|__test (1 kb)		 
		*/
		Component baitap01 	= new File("baitap01", 5);
		Component baitap02 	= new File("baitap02", 3);
		Component abc 		  = new File("abc", 12);
		Component test 		  = new File("test", 1);
		
		Component LYTHUYET 	= new Folder("LY THUYET", Arrays.asList(abc));
		Component JAVA 		  = new Folder("JAVA", Arrays.asList(baitap01, baitap02, LYTHUYET));
		Component CSHARP 	  = new Folder("C#", Arrays.asList());		
		Component LAPTRINH 	= new Folder("LAP TRINH", Arrays.asList(JAVA, CSHARP, test));
		
		***System.out.println("Duong dan cua baitap02 la: " + baitap02.getName());***
    System.out.println("Kich thuoc cua baitap02 la: " + baitap02.getTotalSize());
		***System.out.println("Duong dan cua LYTHUYET la: " + LYTHUYET.getName());***
    System.out.println("Kich thuoc cua LYTHUYET la: " + LYTHUYET.getTotalSize());
		System.out.println("Kich thuoc cua LAPTRINH la: " + LAPTRINH.getTotalSize());
	}
}
X. Flyweight
2. D·ª±ng
B∆∞·ªõc 1: X√°c ƒë·ªãnh c√°c ph·∫ßn t·ª≠ c·ªë ƒë·ªãnh v√† bi·∫øn ƒë·ªïi
X√°c ƒë·ªãnh c√°c thu·ªôc t√≠nh mang t√≠nh b·∫£n ch·∫•t: c√°c thu·ªôc t√≠nh m√† c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ chia s·∫ª. Ch√∫ng th∆∞·ªùng l√† c√°c thu·ªôc t√≠nh kh√¥ng thay ƒë·ªïi ho·∫∑c √≠t thay ƒë·ªïi.
X√°c ƒë·ªãnh c√°c thu·ªôc t√≠nh kh√¥ng mang t√≠nh b·∫£n ch·∫•t: c√°c thu·ªôc t√≠nh kh√¥ng th·ªÉ chia s·∫ª v√† th∆∞·ªùng ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ b√™n ngo√†i.
B∆∞·ªõc 2: T·∫°o interface ho·∫∑c l·ªõp c∆° s·ªü cho c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ chia s·∫ª (Flyweight)
Interface ho·∫∑c l·ªõp c∆° s·ªü n√†y s·∫Ω ch·ª©a c√°c ph∆∞∆°ng th·ª©c chung cho c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ chia s·∫ª.
C√°c thu·ªôc t√≠nh mang t√≠nh b·∫£n ch·∫•t t·∫°i c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t trong interface ho·∫∑c l·ªõp c∆° s·ªü.
Interface ho·∫∑c l·ªõp c∆° s·ªü n√†y s·∫Ω ch·ª©a c√°c ph∆∞∆°ng th·ª©c chung cho c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ chia s·∫ª. Trong tr∆∞·ªùng h·ª£p n√†y, ch√∫ng ta c√≥ th·ªÉ t·∫°o m·ªôt interface Shape.
Code

package flyweight2;

public interface Shape {
	void draw();
}
B∆∞·ªõc 3: X√°c ƒë·ªãnh l·ªõp c·ª• th·ªÉ c·ªßa Flyweight
T·∫°o c√°c l·ªõp c·ª• th·ªÉ c·ªßa Flyweight implement interface ho·∫∑c k·∫ø th·ª´a t·ª´ l·ªõp c∆° s·ªü Flyweight.
Implement c√°c ph∆∞∆°ng th·ª©c c·ªßa Flyweight, bao g·ªìm c·∫£ vi·ªác x·ª≠ l√Ω c√°c thu·ªôc t√≠nh n·ªôi t·∫°i v√† bi·∫øn ƒë·ªïi (n·∫øu c·∫ßn).
T·∫°o c√°c l·ªõp c·ª• th·ªÉ c·ªßa Flyweight implement interface Shape, ch·∫≥ng h·∫°n nh∆∞ Circle.

ƒê·∫£m b·∫£o r·∫±ng c√°c thu·ªôc t√≠nh c·ªë ƒë·ªãnh nh∆∞ color v√† material ƒë∆∞·ª£c s·ª≠ d·ª•ng thay v√¨ l∆∞u tr·ªØ t·∫°i m·ªói ƒë·ªëi t∆∞·ª£ng.

Code

package flyweight2;

public class Circle implements Shape {
	private String color;
	
	private int x;
	private int y;
	private int radius;

	public Circle(String color) {
		System.out.printf("T·∫°o m·ªõi ƒë·ªëi t∆∞·ª£ng m√†u [%s] trong kho·∫£ng th·ªùi gian 2000ms...", color);
		this.color = color;

		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public void setRadius(int radius) {
		this.radius = radius;
	}

	@Override
	public void draw() {
		System.out.printf("V·∫Ω ƒë∆∞·ªùng tr√≤n b√°n k√≠nh %d, t·ªça ƒë·ªô t√¢m (%d, %d), m√†u %s\\n", this.radius, this.x, this.y, this.color);
	}
}
B∆∞·ªõc 4: T·∫°o m·ªôt Factory ƒë·ªÉ qu·∫£n l√Ω Flyweights
Factory s·∫Ω t·∫°o v√† qu·∫£n l√Ω c√°c Flyweights.
Khi c·∫ßn s·ª≠ d·ª•ng m·ªôt Flyweight, Factory ki·ªÉm tra xem n√≥ ƒë√£ t·ªìn t·∫°i ch∆∞a. N·∫øu ch∆∞a t·ªìn t·∫°i, n√≥ t·∫°o m·ªõi; n·∫øu ƒë√£ t·ªìn t·∫°i, n√≥ s·ª≠ d·ª•ng l·∫°i Flyweight ƒë√£ c√≥.
T·∫°o m·ªôt CircleFactory ƒë·ªÉ t·∫°o v√† qu·∫£n l√Ω c√°c ƒë·ªëi t∆∞·ª£ng Circle.

Khi c·∫ßn s·ª≠ d·ª•ng m·ªôt Circle, CircleFactory s·∫Ω ki·ªÉm tra xem ƒë√£ c√≥ m·ªôt Circle c√≥ c√πng color v√† material ch∆∞a. N·∫øu c√≥, n√≥ s·∫Ω tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë√≥; n·∫øu kh√¥ng, n√≥ s·∫Ω t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng m·ªõi.

Code

package flyweight2;

import java.util.HashMap;

public class CircleFactory {

	private static final HashMap<String, Circle> cache = new HashMap<String, Circle>();

	public static Circle getCircle(String color) {
		Circle circle = cache.get(color);

		if (circle == null) {
			circle = new Circle(color);
			cache.put(color, circle);
			System.out.println("ƒê√£ t·∫°o xong ƒë·ªëi t∆∞·ª£ng v·ªõi m√†u " + color);
		} else {
			System.out.println("D√πng l·∫°i ƒë·ªëi t∆∞·ª£ng 
				v·ªõi m√†u " + color);
		}
		return circle;
	}
}

B∆∞·ªõc 5: S·ª≠ d·ª•ng Flyweights trong ·ª©ng d·ª•ng
Khi c·∫ßn s·ª≠ d·ª•ng m·ªôt ƒë·ªëi t∆∞·ª£ng, client s·∫Ω y√™u c·∫ßu t·ª´ Factory.
Client s·∫Ω truy·ªÅn c√°c thu·ªôc t√≠nh b√™n ngo√†i c·∫ßn thi·∫øt cho ƒë·ªëi t∆∞·ª£ng n·∫øu c√≥.
Khi c·∫ßn v·∫Ω m·ªôt h√¨nh tr√≤n, client s·∫Ω y√™u c·∫ßu m·ªôt Circle t·ª´ CircleFactory v√† truy·ªÅn c√°c thu·ªôc t√≠nh bi·∫øn ƒë·ªïi nh∆∞ x, y, r.

Code

package flyweight2;

public class FlyweightPatternDemoMain {
	private static final String colors[] = { "Red", "Green", "Blue", "White", "Black" };

	public static void main(String[] args) {
		for (int i = 0; i < 20; ++i) {
			var m√†u = getRandomColor();
			var x = getRandomX();
			var y = getRandomY();
			var r = (int)(1 + 1000*Math.random());
			
			Circle circle = CircleFactory.getCircle(m√†u);
			
			circle.setX(x);
			circle.setY(y);
			circle.setRadius(r);
			
			circle.draw();
		}
	}

	private static String getRandomColor() {
		// 0 -> colors.length - 1
		return colors[(int) (Math.random() 
			* colors.length)];
	}

	private static int getRandomX() {
		return (int) (Math.random() * 100);
	}

	private static int getRandomY() {
		return (int) (Math.random() * 100);
	}
}
XI. Strategy
2. D·ª±ng
1. X√°c ƒë·ªãnh Interface / l·ªõp c∆° s·ªü ƒë·ªÉ ƒë·∫°i di·ªán cho t·∫•t c·∫£ c√°c thu·∫≠t to√°n.
Interface n√†y s·∫Ω ƒë·ªãnh nghƒ©a ph∆∞∆°ng th·ª©c m√† t·∫•t c·∫£ c√°c thu·∫≠t to√°n c·ª• th·ªÉ s·∫Ω ph·∫£i tri·ªÉn khai.

L√† chung cho t·∫•t c·∫£ concrete strategy. N√≥ khai b√°o m·ªôt ph∆∞∆°ng th·ª©c m√† context s·∫Ω d√πng ƒë·ªÉ g·ªçi & th·ª±c thi m·ªôt c√¥ng vi·ªác g√¨ ƒë√≥ (theo chi·∫øn l∆∞·ª£c c·ª• th·ªÉ)

Class iSortStrategy

public interface iSortStrategy {

	void sapXep(int arr[]);

}
2. T·∫°o c√°c class (~ thu·∫≠t to√°n) c·ª• th·ªÉ tri·ªÉn khai interface ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh.
M·ªói l·ªõp n√†y s·∫Ω tri·ªÉn khai ph∆∞∆°ng th·ª©c c·ªßa interface ƒë·ªÉ th·ª±c hi·ªán thu·∫≠t to√°n c·ªßa n√≥.

C√°c l·ªõp Concrete Strategy c√†i ƒë·∫∑t c√°c b·∫£n kh√°c nhau (chi·∫øn l∆∞·ª£c kh√°c nhau) c·ªßa thu·∫≠t to√°n.

Class SapXepChen

public class SapXepChen implements iSortStrategy{
	@Override
	public void sapXep(int arr[]) {
		int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;

            /* Di chuy·ªÉn c√°c ph·∫ßn t·ª≠ c·ªßa arr[0..i-1], 
            l·ªõn h∆°n key, ƒë·∫øn m·ªôt v·ªã tr√≠ tr∆∞·ªõc v·ªã tr√≠ 
            hi·ªán t·∫°i c·ªßa ch√∫ng */
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
	}
}
Class SapXepNoiBot

public class SapXepNoiBot implements iSortStrategy{
	@Override
    public void sapXep(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (arr[j] > arr[j + 1]) {
                    // Ho√°n ƒë·ªïi arr[j] v√† arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }
}
Class SapXepNhanh

public class SapXepNhanh implements iSortStrategy{
	@Override
    public void sapXep(int[] arr) {
        quickSort(arr, 0, arr.length - 1);
    }

    private void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);

            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }
}
3. T·∫°o Context: n∆°i s·∫Ω s·ª≠ d·ª•ng c√°c thu·∫≠t to√°n, ch·ª©a m·ªôt tham chi·∫øu ƒë·∫øn m·ªôt ƒë·ªëi t∆∞·ª£ng thu·∫≠t to√°n (~interface ƒë√£ x√°c ƒë·ªãnh) v√† s·∫Ω g·ªçi ph∆∞∆°ng th·ª©c c·ªßa thu·∫≠t to√°n ƒë√≥ khi c·∫ßn.
Context ch·ª©a m·ªôt tham chi·∫øu ƒë·∫øn m·ªôt trong nh·ªØng concrete strategy & giao ti·∫øp v·ªõi ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c tham chi·∫øu n√†y ch·ªâ th√¥ng qua giao di·ªán strategy (ch·ª©a 1 ƒë·ªëi t∆∞·ª£ng interface Strategy)

Class Context


public class Context {
    private iSortStrategy strategy;

    public Context(iSortStrategy strategy) {
		super();
		this.strategy = strategy;
	}

	public Context() {
		// TODO Auto-generated constructor stub
	}

	public void setStrategy(iSortStrategy strategy) {
                this.strategy = strategy;
       }

        public void sapXep(int[] arr) {
               strategy.sapXep(arr);
       }
}
4. Thi·∫øt l·∫≠p v√† s·ª≠ d·ª•ng: Cu·ªëi c√πng, thi·∫øt l·∫≠p Context v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng thu·∫≠t to√°n c·ª• th·ªÉ v√† sau ƒë√≥ s·ª≠ d·ª•ng n√≥ ƒë·ªÉ th·ª±c hi·ªán c√°c thu·∫≠t to√°n ƒë√≥.
Context g·ªçi ph∆∞∆°ng th·ª©c th·ª±c thi d·ª±a v√†o ƒë·ªëi t∆∞·ª£ng strategy. Context kh√¥ng bi·∫øt thu·∫≠t to√°n c·ªßa strategy ƒë∆∞·ª£c c√†i ƒë·∫∑t nh∆∞ th·∫ø n√†o.

Class ChuongTrinh

import java.util.Random;

public class ChuongTrinh {
	public static void main(String[] args) {
		int[] arr = new int[10000];
        Random rd = new Random();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rd.nextInt();
        }
	
		Context context = new Context();
		var t1 = System.currentTimeMillis();
		context.setStrategy(new SapXepNoiBot());
		context.sapXep(arr);
		var t2 = System.currentTimeMillis();
		// thoi gian thuc thi (1)  = t2 - t1 (ms)

//		context.setStrategy(new (SapXepChen());
//		context.sapXep(arr);
//		var t2 = System.currentTimeMillis();
//		// thoi gian thuc thi (2) = t2 - t1 (ms)
//
//		context.setStrategy(new (SapXepNhanh());
//		context.sapXep(arr);
//		var t2 = System.currentTimeMillis();
//		// thoi gian thuc thi (3) = t2 - t1 (ms)
	}
}
XII. State
2. D·ª±ng
1. Interface State khai b√°o c√°c ph∆∞∆°ng th·ª©c ƒë·∫∑c th√π cho state.
C√°c ph∆∞∆°ng th·ª©c n√†y ph·∫£i c√≥ √Ω nghƒ©a cho t·∫•t c·∫£ c√°c state v√¨ b·∫°n kh√¥ng mu·ªën c√°c state ph·∫£i c√†i ƒë·∫∑t c√°c h√†m v√¥ √≠ch hay c√°c h√†m m√† kh√¥ng bao gi·ªù ƒë∆∞·ª£c g·ªçi

interface State

package states;

public interface State {
	void onCalling();
	void onSMSReceived();
	void onSystemNotification();
}
2. Concrete State implements State ph·∫£i cung c·∫•p b·∫£n c√†i ƒë·∫∑t c·ª• th·ªÉ c·ªßa n√≥ t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i c·ª• th·ªÉ.
ƒê·ªÉ tr√°nh l·∫∑p l·∫°i code c·ªßa nhi·ªÅu state, c√≥ th·ªÉ ƒë∆∞a ra c√°c l·ªõp tr·ª´u t∆∞·ª£ng & ƒë√≥ng g·ªçi c√°c h√†nh vi chung

C√°c ƒë·ªëi t∆∞·ª£ng State c√≥ th·ªÉ l∆∞u backreference context object. Th√¥ng qua tham chi·∫øu n√†y, state c√≥ th·ªÉ l·∫•y th√¥ng tin c·∫ßn thi·∫øt t·ª´ context object c≈©ng nh∆∞ th·ª±c hi·ªán vi·ªác chuy·ªÉn tr·∫°ng th√°i cho context.

Class Utils

package dp;

public class Utils {
	public static void rung() {
		System.out.println("Rung ƒëi·ªán tho·∫°i");
	}

	public static void ph√°t√ÇmThanh(int √¢mL∆∞·ª£ng, int s·ªëL·∫ßn) {
		System.out.printf("BEEP-BEEP v·ªõi √¢m l∆∞·ª£ng %d trong %d l·∫ßn\\n", √¢mL∆∞·ª£ng, s·ªëL·∫ßn);
	}
}
Class StateChu·∫©n

package states;

import dp.Utils;

public class StateChu·∫©n implements State {

	@Override
	public void onCalling() {
		System.out.printf("OnCalling: [\\n");
		Utils.rung();
		Utils.ph√°t√ÇmThanh(80, 3);
		System.out.printf("]\\n");
	}

	@Override
	public void onSMSReceived() {
		System.out.println("On SMS received: [");
		Utils.ph√°t√ÇmThanh(60, 1);
		System.out.println("]");
	}

	@Override
	public void onSystemNotification() {
		System.out.println("On System notification: [");
		Utils.ph√°t√ÇmThanh(50, 1);
		System.out.println("]");		
	}
}
Class StateNgo√†iTr·ªùi

package states;

import dp.Utils;

public class StateNgo√†iTr·ªùi implements State {

	@Override
	public void onCalling() {
		System.out.printf("OnCalling: [\\n");
		Utils.rung();
		Utils.rung();
		Utils.rung();
		Utils.ph√°t√ÇmThanh(100, 5);
		System.out.printf("]\\n");
	}

	@Override
	public void onSMSReceived() {
		System.out.println("On SMS received: [");
		Utils.ph√°t√ÇmThanh(100, 1);
		System.out.println("]");
	}

	@Override
	public void onSystemNotification() {
		System.out.println("On System notification: [");
		Utils.ph√°t√ÇmThanh(90, 1);
		System.out.println("]");		
	}

}
Class StateY√™nL·∫∑ng

package states;

import dp.Utils;

public class StateY√™nL·∫∑ng implements State{

	@Override
	public void onCalling() {
		System.out.printf("OnCalling: [\\n");
		Utils.rung();
		System.out.printf("]\\n");
	}

	@Override
	public void onSMSReceived() {
		System.out.println("On SMS received: [");		
		System.out.println("]");
	}

	@Override
	public void onSystemNotification() {
		System.out.println("On System notification: [");
		System.out.println("]");		
	}
}
3. Class Context ch·ª©a tham chi·∫øu ƒë·∫øn m·ªôt trong nh·ªØng ƒë·ªëi t∆∞·ª£ng state & nh·ªù n√≥ th·ª±c hi·ªán c√°c c√¥ng vi·ªác (t·∫°o c√°c h√†m nh∆∞ trong interface) tu·ª≥ thu·ªôc v√†o state. Context s·∫Ω giao ti·∫øp v·ªõi state object th√¥ng qua giao di·ªán state. Context c√≥ setter ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi state cho ƒë·ªëi t∆∞·ª£ng.
Class Phone

package dp;

import states.*;

public class Phone {
	private State state;

	public void onCalling() {
		this.state.onCalling();
	}
	
	public void onSMSReceived() {
		this.state.onSMSReceived();
	}
	
	public void onSystemNotification() {
		this.state.onSystemNotification();
	}
	
	public void setProfile(State state) {
		System.out.printf("Thi·∫øt l·∫≠p tr·∫°ng th√°i [%s] cho 
			ƒëi·ªán tho·∫°i\\n", state.getClass().toString());
		this.state = state;
	}
}
4. C·∫£ context l·∫´n concrete state ƒë·ªÅu c√≥ th·ªÉ thay ƒë·ªïi state cho context v√† th·ª±c hi·ªán vi·ªác chuy·ªÉn tr·∫°ng th√°i.
Class TestProgram

package dp;

import states.StateNgo√†iTr·ªùi;
import states.StateY√™nL·∫∑ng;
public class TestProgram {

	public static void main(String[] args) {
		Phone dt = new Phone();
		
		// 1a, b, c, d) Thi·∫øt l·∫≠p tr·∫°ng th√°i Ngo√†iTr·ªùi 
		// cho ƒëi·ªán tho·∫°i
		dt.setProfile(new StateNgo√†iTr·ªùi());
		dt.onSMSReceived();
		dt.onCalling();
		dt.onSystemNotification();
		
		// 2a, b, c, d) Th·ª≠ nghi·ªám v·ªõi tr·∫°ng th√°i Y√™nL·∫∑ng 
		// cho ƒëi·ªán tho·∫°i
		dt.setProfile(new StateY√™nL·∫∑ng());
		dt.onSMSReceived();
		dt.onCalling();
		dt.onSystemNotification();
	}
}
XIII. Iterator
2. D·ª±ng
1. ƒê·ªãnh nghƒ©a interface Iterator: X√°c ƒë·ªãnh c√°c ph∆∞∆°ng th·ª©c c·∫ßn thi·∫øt cho vi·ªác duy·ªát qua c√°c ph·∫ßn t·ª≠.
interface IteratorSoNguyen

package test.ite;

public interface IteratorSoNguyen {
	// kh·ªüi ƒë·ªông b·ªô l·∫∑p
	void start();
	
	// ki·ªÉm tra xem c√≥ pt·ª≠ ph√≠a sau?
	boolean hasNext();
	
	// l·∫•y gi√° tr·ªã pt·ª≠ hi·ªán t·∫°i & d·ªãch ra sau
	int next();
}
2. ƒê·ªãnh nghƒ©a interface Aggregate: X√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫°o m·ªôt iterator.
interface IterableSoNguyenCollection

package test.ite;

public interface IterableSoNguyenCollection {
	// T·∫°o ra b·ªô duy·ªát "chu·∫©n" 1-->n
	IteratorSoNguyen getIteratorSoNguyenChuan();
}
3. C√†i ƒë·∫∑t l·ªõp c·ª• th·ªÉ c·ªßa Aggregate: Tri·ªÉn khai giao di·ªán Aggregate v√† ch·ª©a c·∫•u tr√∫c d·ªØ li·ªáu.
Class MyDataStructure

package test.ite.implement;

import java.util.ArrayList;
import java.util.List;

import test.ite.IterableSoNguyenCollection;
import test.ite.IteratorSoNguyen;

public class MyDataStructure implements IterableSoNguyenCollection {
	private List<Integer> lst = new ArrayList<>();

	public void setList(List<Integer> lst) {
		this.lst = lst;
	}

	public void add(Integer x) {
		this.lst.add(x);
	}

	@Override
	public IteratorSoNguyen getIteratorSoNguyenChuan() {
		return new IteratorSoNguyenChuan(lst);
	}

	public IteratorSoNguyenDuong getIteratorSoNguyenDuong() {
		return new IteratorSoNguyenDuong(lst);
	}

	public List<Integer> getLst() {
		return lst;
	}
}
4. C√†i ƒë·∫∑t l·ªõp c·ª• th·ªÉ c·ªßa Iterator: Tri·ªÉn khai giao di·ªán Iterator v√† cung c·∫•p logic duy·ªát qua c√°c ph·∫ßn t·ª≠.
Class IteratorSoNguyenDuong

package test.ite.implement;

import java.util.ArrayList;
import java.util.List;

import test.ite.IteratorSoNguyen;

public class IteratorSoNguyenDuong implements IteratorSoNguyen {
	private List<Integer> lst;
	private int pos;

	public IteratorSoNguyenDuong(List<Integer> lst) {
		this.lst = new ArrayList<>();
		lst.forEach(x -> {
			if (x > 0)
				this.lst.add(x);
		});
	}

	public IteratorSoNguyenDuong(Integer... integers) {
		lst = new ArrayList<>();
		for (var x: integers)
			if (x > 0)
				lst.add(x);
	}
	
	@Override
	public void start() {
		this.pos = 0;
	}

	@Override
	public boolean hasNext() {
		return this.pos <= this.lst.size() - 1;
	}

	@Override
	public int next() {
		var x = this.lst.get(this.pos);
		this.pos++;
		return x;
	}
}
Class IteratorSoNguyenChuan

package test.ite.implement;

import java.util.List;

import test.ite.IteratorSoNguyen;

// Duy·ªát danh s√°ch s·ªë nguy√™n theo ki·ªÉu chu·∫©n
public class IteratorSoNguyenChuan implements IteratorSoNguyen {
	private List<Integer> lst;
	private int pos;

	public IteratorSoNguyenChuan(List<Integer> lst) {
		this.lst = lst;
	}

	@Override
	public void start() {
		this.pos = 0;
	}

	@Override
	public boolean hasNext() {
		if (this.pos <= this.lst.size() - 1)
			return true;
		else
			return false;
	}

	@Override
	public int next() {
		var x = this.lst.get(this.pos);
		this.pos++;
		return x;
	}
}
Class IteratorSoNguyenVTChan

package test.ite.implement;

import java.util.ArrayList;
import java.util.List;

import test.ite.IteratorSoNguyen;

public class IteratorSoNguyenVTChan implements IteratorSoNguyen{
	private int vt;
	private List<Integer> lst;
	
	public IteratorSoNguyenVTChan(List<Integer> lst) {
		this.lst = new ArrayList<>();
		for (int i = 0; i < lst.size(); i = i+2)
			this.lst.add(lst.get(i));		
	}
	
	@Override
	public void start() {
		this.vt = 0;		
	}

	@Override
	public boolean hasNext() {
		return this.vt < this.lst.size();
	}

	@Override
	public int next() {
		var x = this.lst.get(vt);
		vt++;
		return x;
	}
}
5. S·ª≠ d·ª•ng Iterator: T·∫°o m·ªôt instance c·ªßa Aggregate, sau ƒë√≥ s·ª≠ d·ª•ng iterator ƒë·ªÉ duy·ªát qua c√°c ph·∫ßn t·ª≠.
Class ChuongTrinhThuNghiem

package test;

import test.ite.IteratorSoNguyen;
import test.ite.implement.IteratorSoNguyenDuong;
import test.ite.implement.MyDataStructure;

public class ChuongTrinhThuNghiem {

	static void printWithIterator(IteratorSoNguyen it) {
		it.start();
		while (it.hasNext()) {
			int e = it.next();

			System.out.printf("%d ", e);
		}
		System.out.println();
	}

	public static void main(String[] args) {
		MyDataStructure x = new MyDataStructure();
		x.add(15);
		x.add(2);
		x.add(100);
		x.add(-1340);
		x.add(135);
		x.add(12);
		x.add(-4);
		x.add(5);
		x.add(-3);

		IteratorSoNguyen it;
		it = x.getIteratorSoNguyenChuan();
		printWithIterator(it);
		
		it = x.getIteratorSoNguyenDuong();
		it = new IteratorSoNguyenDuong(1, 2, -4, 55, 566, -3, 1, -1, 10);

//		it = new IteratorSoNguyenVTChan(x.getLst());

		printWithIterator(it);
	}
}

M·ªôt s·ªë BT
BT1:
package service
Class SinhVienRepo

package _21T1020105_service;

import java.util.List;

import _21T1020105_model.SinhVien;

public interface SinhVienRepo {
	List<SinhVien> selectAll();

	void insert(SinhVien sv);

	void delete(String maSinhVien);
}
package model
Class SinhVien

package _21T1020105_model;

import java.util.Date;

@lombok.Getter
@lombok.Setter
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
public class SinhVien {
	private String maSinhVien;
	private String hoTen;
	private boolean gioiTinhNam;
	private Date ngaySinh;
}
Class CauHinh

package _21T1020105_model;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

@lombok.Getter
@lombok.Setter
public class CauHinh {
	public static String LOAI_TEXT_FILE = "TEXT_FILE";
	public static String LOAI_SQL = "MS_SQLSERVER";
	
	private String loaiNguon;
	private String chuoiKetNoi;
	private static CauHinh _instance = null;

	private CauHinh() {
        try {
        	BufferedReader br = new BufferedReader(new FileReader("config2.txt"));
            loaiNguon = br.readLine();
            chuoiKetNoi = br.readLine();
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	public static CauHinh getInstance() {
        if (_instance == null) {
            _instance = new CauHinh();
        }
        return _instance;
    }
}
Class DbHelper

package _21T1020105_model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DbHelper {
	private Connection con = null;
	
	public Connection getConnection() {
		return this.con;
	}

	private static DbHelper _instance = null;
	
	
	private DbHelper() {
		String connectionUrl = CauHinh.getInstance().getChuoiKetNoi();
		try {
			con = DriverManager.getConnection(connectionUrl);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static DbHelper getInstance() throws SQLException {
		if (_instance == null)
			_instance = new DbHelper();
			
		return _instance;
	}
}
package implement
Class SinhVienRepoSqlServer

package _21T1020105_implement;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import _21T1020105_model.DbHelper;
import _21T1020105_model.SinhVien;
import _21T1020105_service.SinhVienRepo;

public class SinhVienRepoSqlServer implements SinhVienRepo {
	private String chuoiKetNoi;

	public SinhVienRepoSqlServer(String cnnst) {
		this.chuoiKetNoi = cnnst;
	}

	@Override
	public List<SinhVien> selectAll() {
		List<SinhVien> lstSV = new ArrayList<>();
	    try {
	    	Connection con = DbHelper.getInstance().getConnection();
	    	String sql = "SELECT * FROM SinhVien";
	        PreparedStatement stm = con.prepareStatement(sql);
	        ResultSet rs = stm.executeQuery();
	        while (rs.next()) {
	        	String masv = rs.getString("MaSinhVien");
				String hoten = rs.getString("HoTen");
				Date ngaysinh = rs.getDate("NgaySinh");
				Boolean gioitinhnam = rs.getBoolean("GioiTinhNam");
				lstSV.add(new SinhVien(masv, hoten, gioitinhnam, ngaysinh));
	        }
	        rs.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return lstSV;
	}

	@Override
	public void insert(SinhVien sv) {
		try {
	    	Connection con = DbHelper.getInstance().getConnection();
	    	String sql = "INSERT INTO SinhVien (MaSinhVien, HoTen, GioiTinhNam, NgaySinh) VALUES (?, ?, ?, ?)";
	        PreparedStatement stm = con.prepareStatement(sql);
	        stm.setString(1, sv.getMaSinhVien());
	        stm.setString(2, sv.getHoTen());
	        stm.setBoolean(3, sv.isGioiTinhNam());
	        stm.setDate(4, new java.sql.Date(sv.getNgaySinh().getTime()));
	        stm.executeUpdate();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}

	@Override
	public void delete(String maSinhVien) {
		try {
	    	Connection con = DbHelper.getInstance().getConnection();
	    	String sql = "DELETE FROM SinhVien WHERE MaSinhVien = ?";
	        PreparedStatement stm = con.prepareStatement(sql);
	        stm.setString(1, maSinhVien);
	        stm.executeUpdate();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}
}
Class SinhVienRepoTXT

package _21T1020105_implement;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import _21T1020105_model.SinhVien;
import _21T1020105_service.SinhVienRepo;

public class SinhVienRepoTXT implements SinhVienRepo {
	private String chuoiKetNoi;

	public SinhVienRepoTXT(String filename) {
		this.chuoiKetNoi = filename;
	}

	private Date convertToDate(String stDMY) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		Date kq = null;
		try {
			kq = sdf.parse(stDMY);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return kq;
	}

	private String convertDateToString(Date d) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		String strDay = sdf.format(d);
		return strDay;
	}
	
	@Override
	public List<SinhVien> selectAll() {
		
		ArrayList<SinhVien> lstSV = new ArrayList<SinhVien>();
		try{
		     FileReader f = new FileReader(this.chuoiKetNoi);
		     BufferedReader b = new BufferedReader(f);
		     while(true){
		          String st = b.readLine();
		          if(st == null || st == "") break;
		          String[] tt = st.split(",");
		          lstSV.add(new SinhVien(tt[0], tt[1], Boolean.parseBoolean(tt[2]), convertToDate(tt[3])));
		     }
		     b.close();
		} catch(Exception e) {
		     e.printStackTrace();
		}
		return lstSV;
	}

	@Override
	public void insert(SinhVien sv) {
		try {
			// m·ªü file ·ªü ch·∫ø ƒë·ªô APPEND
			FileWriter fw = new FileWriter(this.chuoiKetNoi, true);
			BufferedWriter bw = new BufferedWriter(fw);

			// ghi d√≤ng t∆∞∆°ng ·ª©ng sv
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
			String stNewSV = String.format("%s,%s,%s,%s\\n", //
					sv.getMaSinhVien(), //
					sv.getHoTen(), //
					sv.isGioiTinhNam(), //
					convertDateToString(sv.getNgaySinh())//
			);
			bw.write(stNewSV);
			
			// ƒë√≥ng file l·∫°i
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void delete(String maSinhVien) {
		// ƒê·ªçc danh s√°ch SinhVien
		var lst = selectAll();
		
		// T√¨m v·ªã tr√≠ trong danh s√°ch m√† tr√πng v·ªõi maSinhVien
		// or nh·ªØng v·ªã tr√≠, tr∆∞·ªùng h·ª£p trong file txt c√≥ nhi·ªÅu sv c√≥ tr√πng msv --> d√πng for each
		int viTri = -1;
		for (int i = 0; i < lst.size(); i++)
			if (lst.get(i).getMaSinhVien().equals(maSinhVien)) {
				viTri = i;
				break;
			}
		
		if (viTri != -1)
			lst.remove(viTri);
		
		// Ghi to√†n b·ªô danh s√°ch n√†y v√†o file
		// - M·ªü file ·ªü ch·∫ø ƒë·ªô ghi ƒë√®
		// - foreach sv
		// 		write d√≤ng sv v√†o file
		// - ƒê√≥ng file l·∫°i
		try {
			FileWriter w = new FileWriter(this.chuoiKetNoi);
			// FileWriter w = new FileWriter(this.chuoiKetNoi, false);
	        PrintWriter ghi = new PrintWriter(w);
	        //boolean laDongDauTien = true;
	        for (var sv : lst) {
				String stNewSV = String.format("%s,%s,%s,%s\\n", //
						sv.getMaSinhVien(), //
						sv.getHoTen(), //
						sv.isGioiTinhNam(), //
						convertDateToString(sv.getNgaySinh())//
				);
				ghi.write(stNewSV);
	        }
	        ghi.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
Class SinhVienRepoFactory

package _21T1020105_implement;

import _21T1020105_model.CauHinh;
import _21T1020105_service.SinhVienRepo;

public class SinhVienRepoFactory {
	public SinhVienRepo createSinhVienRepo(CauHinh cfg) {
		if (cfg.getLoaiNguon().equals(cfg.LOAI_TEXT_FILE) ){
			return new SinhVienRepoTXT(cfg.getChuoiKetNoi());
		} else {
			return new SinhVienRepoSqlServer(cfg.getChuoiKetNoi());
		}
	}
}
package ui
Class ChuongTrinh

package _21T1020105_ui;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import _21T1020105_implement.SinhVienRepoFactory;
import _21T1020105_model.CauHinh;
import _21T1020105_model.SinhVien;
import _21T1020105_service.SinhVienRepo;

public class ChuongTrinh {
	static SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy");
	public static void main(String[] args) throws IOException {
		// ƒê·ªçc c·∫•u h√¨nh t·ª´ file config.txt
        CauHinh cfg = CauHinh.getInstance();

        SinhVienRepo repo = (new SinhVienRepoFactory()).createSinhVienRepo(cfg);
        
		// 1. ƒê·ªçc & in danh s√°ch sv
		var lst = repo.selectAll();
		System.out.println("Danh s√°ch c√°c sinh vi√™n ƒë·ªçc ƒë∆∞·ª£c");
		inDanhSach(lst);

		// 2. Insert sv v√†o ngu·ªìn d·ªØ li·ªáu
		SinhVien svMoi = new SinhVien();
		svMoi.setMaSinhVien("21T1020123");
		svMoi.setHoTen("Nguyen Nhu Quynh");
		svMoi.setGioiTinhNam(false);
		try {
			svMoi.setNgaySinh(d.parse("12/06/2003"));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		repo.insert(svMoi);
		System.out.println("\\nDanh s√°ch sinh vi√™n sau khi insert");
		lst = repo.selectAll();
		inDanhSach(lst);

		// 3. Xo√° sinh vi√™n kh·ªèi ngu·ªìn d·ªØ li·ªáu
		repo.delete("21T1020123");
		System.out.println("\\nDanh s√°ch sinh vi√™n sau khi x√≥a");
		lst = repo.selectAll();
		inDanhSach(lst);
	}

	/**
	 * In danh s√°ch sinh vi√™n trong danh s√°ch lst ra m√†n h√¨nh
	 * 
	 * @param lst
	 */
	private static void inDanhSach(List<SinhVien> lst) {
		for (int i = 0; i < lst.size(); i++) {
			var sv = lst.get(i);
			System.out.printf("%5s %30s %8s %s\\n", //
					sv.getMaSinhVien(), //
					sv.getHoTen(), //
					sv.isGioiTinhNam(), //
					d.format(sv.getNgaySinh()));//
		}
	}
}